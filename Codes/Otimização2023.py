from pulp import LpMinimize, LpProblem, lpSum, LpVariable, LpStatus

# Define the problem data
plants = [3403208, 3423909, 3424402]  # 3 plants
customers = [2301, 2302, 2303, 2304, 2305, 
             2306, 2307, 2308, 2309, 2310, 
             2311, 2312, 2313, 2314, 2315, 
             2316, 2317, 2318, 2319, 2320, 
             2321, 2322, 2323, 2324, 2325, 
             2326, 2327, 2328, 2329, 2330, 
             2331, 2332, 2333, 2334, 2335, 
             2336, 2337, 2338, 2339, 2340, 
             2341, 2342, 2343, 2344, 2345, 
             2346, 2347, 2348, 2349, 2350, 
             2351]  # 51 customers

transportation_costs = {
    (3403208, 2301): 0.56588531747143,
	(3424402, 2301): 0.44276367635442,
	(3424402, 2302): 0.40900359737435,
	(3403208, 2302): 0.51454677780000,
	(3424402, 2303): 0.39858788211407,
	(3403208, 2303): 0.43621944443333,
	(3424402, 2304): 0.40574422524563,
	(3403208, 2304): 0.47374266303382,
	(3424402, 2305): 0.42364105914253,
	(3403208, 2305): 0.50951157803988,
	(3423909, 2305): 0.36659182007423,
	(3424402, 2306): 0.39553175365043,
	(3403208, 2306): 0.55857041470850,
	(3424402, 2307): 0.43232306383159,
	(3403208, 2307): 0.52949522224000,
	(3424402, 2308): 0.39444533862894,
	(3423909, 2308): 0.36641160340886,
	(3403208, 2308): 0.55587950581861,
	(3403208, 2309): 0.43482745688219,
	(3424402, 2309): 0.48103074007304,
	(3423909, 2309): 0.40402000000000,
	(3423909, 2310): 0.32481757016957,
	(3424402, 2310): 0.39620637362637,
	(3403208, 2310): 0.71870255145185,
	(3403208, 2311): 0.39567911824371,
	(3423909, 2311): 0.36639480229322,
	(3424402, 2311): 0.56335008169348,
	(3403208, 2312): 0.79494553714974,
	(3403208, 2313): 0.77019875000000,
	(3403208, 2314): 0.71751714285714,
	(3403208, 2315): 0.84117323521622,
	(3403208, 2316): 0.84832640430532,
	(3403208, 2317): 0.84281370372222,
	(3403208, 2318): 0.84271467740739,
	(3424402, 2319): 0.39621482993197,
	(3403208, 2319): 0.69821614529212,
	(3424402, 2320): 0.31590000000000,
	(3403208, 2320): 0.73511111110000,
	(3424402, 2321): 0.31590000000000,
	(3403208, 2321): 0.77231481480000,
	(3424402, 2322): 0.32302482755862,
	(3403208, 2322): 0.69691084102773,
	(3424402, 2323): 0.28886750000000,
	(3403208, 2323): 0.74994444446000,
	(3423909, 2324): 0.31506300002000,
	(3424402, 2324): 0.31797361113333,
	(3403208, 2324): 0.71755789163169,
	(3424402, 2325): 0.28886750000000,
	(3403208, 2325): 0.63824000000000,
	(3423909, 2326): 0.33669675871436,
	(3424402, 2326): 0.31264188937245,
	(3403208, 2326): 0.70481931861215,
	(3423909, 2327): 0.35608733334000,
	(3424402, 2327): 0.28886750000000,
	(3403208, 2327): 0.72764570559475,
	(3423909, 2328): 0.34599466442289,
	(3424402, 2328): 0.35157805554661,
	(3403208, 2328): 0.72821457282621,
	(3423909, 2329): 0.35912137128099,
	(3424402, 2329): 0.32341791665000,
	(3403208, 2329): 0.76300833335000,
	(3424402, 2330): 0.31590000000000,
	(3423909, 2330): 0.43709464329567,
	(3403208, 2330): 0.76393772728182,
	(3423909, 2331): 0.33493886521489,
	(3424402, 2331): 0.33252666670000,
	(3403208, 2331): 0.70201328448502,
	(3424402, 2332): 0.30011333330000,
	(3423909, 2332): 0.36023777776667,
	(3403208, 2332): 0.68809752524545,
	(3424402, 2333): 0.36464666670000,
	(3403208, 2333): 0.67530763888333,
	(3423909, 2333): 0.59854000000000,
	(3424402, 2334): 0.31713063221034,
	(3423909, 2334): 0.40402000000000,
	(3403208, 2334): 0.69014721612912,
	(3424402, 2335): 0.32995299585365,
	(3423909, 2335): 0.40402000000000,
	(3403208, 2335): 0.69701580112696,
	(3423909, 2336): 0.48358016012315,
	(3424402, 2336): 0.72200551159182,
	(3423909, 2337): 0.46823123240531,
	(3424402, 2337): 0.70674008800311,
	(3423909, 2338): 0.46418196710139,
	(3424402, 2338): 0.70317217452934,
	(3423909, 2339): 0.55698851853333,
	(3403208, 2339): 0.88012555556250,
	(3423909, 2340): 0.61337462077709,
	(3403208, 2340): 0.97875590406575,
	(3423909, 2341): 0.57908681053538,
	(3403208, 2341): 0.92311363692788,
	(3423909, 2342): 0.57281001145563,
	(3403208, 2342): 0.91434984195533,
	(3423909, 2343): 0.61325396893793,
	(3403208, 2343): 0.99182603482911,
	(3424402, 2344): 0.47938025350103,
	(3403208, 2344): 0.63854398814606,
	(3424402, 2345): 0.49088833123084,
	(3403208, 2345): 0.64221604209178,
	(3424402, 2346): 0.47474808083636,
	(3403208, 2346): 0.64551406250000,
	(3403208, 2347): 0.40402000000000,
	(3423909, 2347): 0.68802132818524,
	(3424402, 2347): 0.90084858071769,
	(3403208, 2348): 0.31266831662910,
	(3423909, 2348): 0.72227756648838,
	(3424402, 2348): 0.96358183170867,
	(3403208, 2349): 0.37451333330000,
	(3423909, 2349): 0.61369833333750,
	(3424402, 2349): 1.05462972222500,
	(3403208, 2350): 0.38331108474269,
	(3423909, 2350): 0.68583569044217,
	(3424402, 2350): 1.01807909011328,
	(3403208, 2351): 0.41775722221667,
	(3423909, 2351): 0.63788150000000,
	(3424402, 2351): 1.08523333336667,
    (3403208, 2336): 999,
    (3403208, 2337): 999,
    (3403208, 2338): 999,
    (3423909, 2301): 999,
    (3423909, 2302): 999,
    (3423909, 2303): 999,
    (3423909, 2304): 999,
    (3423909, 2306): 999,
    (3423909, 2307): 999,
    (3423909, 2312): 999,
    (3423909, 2313): 999,
    (3423909, 2314): 999,
    (3423909, 2315): 999,
    (3423909, 2316): 999,
    (3423909, 2317): 999,
    (3423909, 2318): 999,
    (3423909, 2319): 999,
    (3423909, 2320): 999,
    (3423909, 2321): 999,
    (3423909, 2322): 999,
    (3423909, 2323): 999,
    (3423909, 2325): 999,
    (3423909, 2344): 999,
    (3423909, 2345): 999,
    (3423909, 2346): 999,
    (3424402, 2312): 999,
    (3424402, 2313): 999,
    (3424402, 2314): 999,
    (3424402, 2315): 999,
    (3424402, 2316): 999,
    (3424402, 2317): 999,
    (3424402, 2318): 999,
    (3424402, 2339): 999,
    (3424402, 2340): 999,
    (3424402, 2341): 999,
    (3424402, 2342): 999,
    (3424402, 2343): 999,
}

customer_demands = {
	2301:	2455800,
	2302:	1433400,
	2303:	1015500,
	2304:	2439900,
	2305:	4467300,
	2306:	2451900,
	2307:	2887500,
	2308:	2745600,
	2309:	6641700,
	2310:	2085600,
	2311:	5395200,
	2312:	1214700,
	2313:	9900,
	2314:	37200,
	2315:	1094100,
	2316:	939300,
	2317:	19200,
	2318:	1474200,
	2319:	1293900,
	2320:	15000,
	2321:	17400,
	2322:	1599000,
	2323:	12900,
	2324:	1553100,
	2325:	21300,
	2326:	3477600,
	2327:	1421700,
	2328:	3620400,
	2329:	1014600,
	2330:	1387500,
	2331:	2572200,
	2332:	36900,
	2333:	18600,
	2334:	1837500,
	2335:	2344500,
	2336:	1605300,
	2337:	2821500,
	2338:	2232600,
	2339:	41400,
	2340:	3410700,
	2341:	2381100,
	2342:	2795100,
	2343:	3715200,
	2344:	2419500,
	2345:	2129100,
	2346:	38100,
	2347:	3057600,
	2348:	2859600,
	2349:	30600,
	2350:	3611700,
	2351:	51300,

}

plant_supplies = {
    3403208: 90000000,
    3423909: 56000000,
    3424402: 90000000
}

# Create the linear programming problem
prob = LpProblem("Transportation_Cost_Minimization", LpMinimize)

# Define the decision variables
shipments = LpVariable.dicts("Shipments", (plants, customers), 0, None, cat='Integer')

# Define the objective function
prob += lpSum([transportation_costs[(p, c)] * shipments[p][c] for p in plants for c in customers if (p, c) in transportation_costs])

# Define the constraints
for p in plants:
    prob += lpSum([shipments[p][c] for c in customers]) <= plant_supplies[p]

for c in customers:
    prob += lpSum([shipments[p][c] for p in plants]) == customer_demands[c]



# Solve the problem
prob.solve()

# Print the results
print("Status:", LpStatus[prob.status])
for v in prob.variables():
    print(v.name, "=", v.varValue)